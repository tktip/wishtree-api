// Code generated by "esc -modtime=0 -prefix md -o internal/docfs/resources.go -pkg docfs md"; DO NOT EDIT.

package docfs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/_title": {
		name:    "_title",
		local:   "md/_title",
		size:    12,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3LP1w1JzS3ISSxJ5QIEAAD//5VQqGQMAAAA
`,
	},

	"/building/_title": {
		name:    "_title",
		local:   "md/building/_title",
		size:    9,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3IqzcxJycxL5wIEAAD//5z9eTEJAAAA
`,
	},

	"/building/makefile.md": {
		name:    "makefile.md",
		local:   "md/building/makefile.md",
		size:    6649,
		modtime: 0,
		compressed: `
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
4mCyXhX/DQAA//9BjTxS+RkAAA==
`,
	},

	"/documentation/1-writing-doc.md": {
		name:    "1-writing-doc.md",
		local:   "md/documentation/1-writing-doc.md",
		size:    3105,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5RWXXPbthJ956/YsR4s3StS9/U6k4c0aT6mSabTpJMHj1uuiZWICMRyAFCy+us7uyAl
y1Hb9MkmsB9nz55daAZfgk3Wb8BwM3TkEybLvihmM/hsk6MI6A143BXF55YgWkP3GOTAbtQUbIQNeQqY
yMA6cAdJDFMYmjQEAl7rQWBOUHemLo0N1CQOh6qYUgSCQDi6s89Oe4beYUOxKorXHGBtHcWlBkviJ5lP
XnK8tiEmcNYfs4rPEvpAa/tABvY2tYAQrd84gnpWVxqZHrDrHcGaA6TWRnV7lEiz2Aj1RbLqEd9UlxWU
hE17PDlAwz6h9REwx27QOTJQ/64J6qr4fEx7NH1UqBcmrIdED+kvIJ9yid8UuNSQgj9C/eoSarHuA3+l
Jo3Z5nIkTZCEgoF7cLROiyVE21mHARKD59ChOy86tRS0LfgEwBjpogaKF+4sjApOew176xzgkLjDZIWy
A2woAXogn8JhCvutKCsV8K8RN1RkaqcSI6UIQ69+eN5HiBR2FIBz1DfvPpaBh0RB8tQdWl9tuK5A4wnj
wtH9QVpKe1VdFNk1bI4Fj1mvI4h7uR58I5luirquN1ysVtAEwkQCpGzRG0ehMNx8Cju4eS6n1Ychppdq
9Dbfzw0361i9/jRfo4u0WEiYQBsbBaoEUtRxjKMBfhmv31g/DwvJXhT1FKfOHdvZkAZ0mfpDTNRdmmvp
HqzZmUzLeZHa33xZFcUH3FK5YXRR9DJEgn0rYthfGqKb4j9wW+8xNW1puKnv5rPV/WCdsX6z6nBLAmum
94abxQ3EhCHFU19UNoHGY7sG9IesNeBwWY5ay2lurAjDSLmKZSr+b+Ac+VFE01eE2vpEwaNbKcerQJGH
IJtMgI4DLhSgG/m+DElV/N76bSwK/SNmHYat4b3XrZnlY2CQlZY3HjvHe/mKB5/wQbU2+RS3zvqtbJG7
ufw3SkE2ey3fNTTo4V5GQz6lbzJsD7kaiDbRUu64QQc9bkhYX3EAhBZje/SBllCokllCNdSJnMGPUyin
VZ1/nlXk7JbgVlbb3bxNqY83q1UK7E1Ltqu23HWDp8rzalGdV/g9LrlsAfSzFJHBZIYTA8seU9TnkMbt
5w5iRGfQl0APDfVJW9ByTKVwpFtlZJQ7mxKZJbB3srkaN5ipZ0NwpfBXFRP8C2pb6Jj6afPfXKr6ktup
1rdji2Lx4tSuqeF9T96Q+eeWL2WepCAPVoae9152Ih3AMW/P+jYT+1JTLi7jfWRwlOJBMaGL/BSYWGel
5CyRL8+lszsqAzlWEZa6NZ4C+Fe+Gdsj1tyklZPUa2v0HSd49yo+epfPnpg8M4G+edWmRTvugdMU7/Gg
yL/iDmMTbJ+Khn1Mmvcl+0Q+wXO4em938tCPuGGegV89m6wxtiLwd6/g+WPXAkCfD/2lpfto6HsKDUaC
psWATaIQ8w+n1JIN0HAIFHv2msfxngKo+Q6DRY1YJX4v5y8x0nyRU8QUxN5G8LyHK3cZ7gSn4x0B7Sgc
UpunBFP21ecfXd+iHzoKtgFdP7HHhiT1WMp8dfsbln/8r/w/3P13tVnC9fV3AVEcV+esaOyRA4OxpXiW
CDR8eb14NrnFwekLd0p1dUlWV1lWH3+4gZ+Iel3u1ptcbLR+bIjnJwU/6kv+5SxsmeWILctLpme8qIpP
nPfSpNQv+syiczXseXBG5iyQxy6PWX6G5boq/gwAAP//O2WDbCEMAAA=
`,
	},

	"/documentation/2-advanced-use.md": {
		name:    "2-advanced-use.md",
		local:   "md/documentation/2-advanced-use.md",
		size:    868,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/5xSu47bMBDs9RUbuDkbloQkXTpfDggCpElwwRXGAV6RK4sAxRWWS9tq/O0BJStxHlVK
cmc4szNcwc6eMBiykCIVxXNHYNmknoKiOg5guB84UFCIaRhYNELkngAX3vVKl8Gz03i9QkuoSShWRbFa
wccUlXtgsSQuHIFbQFFnPMViFyGLOA5kwQXYv4jTDHq6l399WNW/+anflucZWFo26y1oduyEjLKMZVRJ
JjsAl32KkgX0Q4cNqTPo/VgVj0kn1r+wzQibTes8Bexps9kCBguBNQ/UqacKiufOZe8YImiHCiMnMBim
J/JBfi6ZWYNQ6y55say5PB3h7LSDlgXogv3gCRBC6huSLTRJgXunurDmwYTOx8lIrGYjZxxhf1/i35G9
K5eyyhRpnSulCNgqyX/GngubInSWGhTgE8nJ0Xlb0InyiNOxg8PucNNqqGUhOLwcFuZSSgXFLtgpw7Pz
fso6Et2vfWPMW2+Bgx+Xu+/fvsQKphxcVjGYIt2h//AZAYVACC20wv2tEYkK3gXKYELT5W+6dJU/8pv9
bKScqyT7q8XXh051iB/qukOp0NvK9fWxpqf3u6+fPz1WQziuix8BAAD//5GG/ElkAwAA
`,
	},

	"/documentation/_title": {
		name:    "_title",
		local:   "md/documentation/_title",
		size:    14,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/3LJTy7NTc0rSSzJzM/jAgQAAP//xkLLTg4AAAA=
`,
	},

	"/front.md": {
		name:    "front.md",
		local:   "md/front.md",
		size:    186,
		modtime: 0,
		compressed: `
H4sIAAAAAAAC/0yNMY7DMAwEe71igStcnfyMw/V+gBmRjglIoiDRCPz7IKrS7mJmfvBnvy6lZXIJYTt1
QAf8FBzdqqPRU2DHXNjSVaQ6uVqN+PdlgDCaJKWMRENi2D6kZkGlIoxlWmLhBVqnpJs59sI7WLskt37j
pTnjIfOfQdbRMt3CIP+iVra07rh6juEdAAD//x+NTsy6AAAA
`,
	},

	"/": {
		name:  "/",
		local: `md`,
		isDir: true,
	},

	"/building": {
		name:  "building",
		local: `md/building`,
		isDir: true,
	},

	"/documentation": {
		name:  "documentation",
		local: `md/documentation`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"md": {
		_escData["/_title"],
		_escData["/building"],
		_escData["/documentation"],
		_escData["/front.md"],
	},

	"md/building": {
		_escData["/building/_title"],
		_escData["/building/makefile.md"],
	},

	"md/documentation": {
		_escData["/documentation/1-writing-doc.md"],
		_escData["/documentation/2-advanced-use.md"],
		_escData["/documentation/_title"],
	},
}
